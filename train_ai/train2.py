import pandas as pd
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from skl2onnx import convert_sklearn
from skl2onnx.common.data_types import StringTensorType, FloatTensorType
import joblib

# ==========================================
# 1Ô∏è‚É£ Keyword dictionary
# ==========================================
keywords = {
    # 1Ô∏è‚É£ Template Website ‚Äì ‡πÄ‡∏ô‡πâ‡∏ô ‚Äú‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‚Äù
    1: [
        "template", "‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï", "‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß", "‡πÄ‡∏ß‡πá‡∏ö‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö", "‡πÄ‡∏ß‡πá‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", "‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°",
        "clone layout", "deploy static site", "upload html", "‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°", "convert figma to html", "‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö"
    ],

    # 2Ô∏è‚É£ Website Design ‚Äì ‡πÄ‡∏ô‡πâ‡∏ô ‚ÄúVisual Design / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‚Äù
    2: [
        "Visual Design", "Color Palette", "Mood Board", "Brand Identity", "Aesthetic",
        "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà", "‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å", "‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡∏ô‡∏™‡∏µ", "landing page design",
        "rebranding", "mockup", "figma ui", "‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°"
    ],

    # 3Ô∏è‚É£ Website + UX/UI ‚Äì ‡πÄ‡∏ô‡πâ‡∏ô ‚ÄúInteraction / Flow / Testing‚Äù
    3: [
        "UX/UI", "user journey", "flow ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "wireframe figma", "prototype", "interaction design",
        "responsive website", "Information Architecture", "Usability Testing", "A/B Testing",
        "user test", "usability", "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö UX", "‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏£‡∏∞‡∏ö‡∏ö"
    ],

    # 4Ô∏è‚É£ Server API + Docs ‚Äì ‡πÄ‡∏ô‡πâ‡∏ô ‚ÄúBackend Only / Microservice‚Äù
    4: [
        "API", "‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô", "backend", "server", "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "swagger", "JWT", "RESTful API",
        "express", "node.js", "endpoint", "‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ API",
        "GraphQL", "Microservices", "Serverless Function", "‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"
    ],

    # 5Ô∏è‚É£ Full Website + Server ‚Äì ‡πÄ‡∏ô‡πâ‡∏ô ‚Äú‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£ front + back + deploy (End-to-End)‚Äù
    5: [
        "‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏∞‡∏ö‡∏ö", "‡∏Ñ‡∏£‡∏ö frontend backend", "deploy production", "‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£", "web + api",
        "‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "full stack", "maintenance", "security setup", "hosting setup",
        "domain integration", "admin dashboard", "auto backup", "CI/CD Pipeline",
        "DevOps", "End-to-End Solution"
    ],

    # 6Ô∏è‚É£ System Analysis ‚Äì ‡πÄ‡∏ô‡πâ‡∏ô ‚Äú‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå / ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö / ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‚Äù (‡πÄ‡∏î‡∏¥‡∏°‡∏î‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    6: [
        "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö", "system analysis", "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡∏ú‡∏±‡∏á‡∏á‡∏≤‡∏ô", "SRS", "requirement gathering",
        "ER diagram", "use case", "UML", "architecture plan", "process mapping", "data model", "functional spec",
        "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏£‡∏∞‡∏ö‡∏ö ERP", "‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "system design document"
    ],

    # 7Ô∏è‚É£ AI & Data Analysis ‚Äì ‡πÄ‡∏ô‡πâ‡∏ô ‚Äú‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• / ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå / dashboard‚Äù (‡πÄ‡∏î‡∏¥‡∏°‡∏î‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    7: [
        "AI", "machine learning", "data analytics", "dashboard", "data visualization",
        "predictive model", "python analysis", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "data science",
        "sales forecast", "trend analysis", "model training", "business insight",
        "kpi dashboard", "data mining", "forecast system", "‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢"
    ],
}

# ==========================================
# 2Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏±‡∏ö keyword score
# ==========================================
def keyword_score(text: str, keywords: dict):
    scores = []
    for pkg, words in keywords.items():
        count = sum(bool(re.search(w, str(text), re.IGNORECASE)) for w in words)
        scores.append(count)
    return scores

# ==========================================
# 3Ô∏è‚É£ ‡πÇ‡∏´‡∏•‡∏î dataset
# ==========================================
df = pd.read_csv("auto_generated_conditions_5000_v2_refined.csv")  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ column: text, package

# ‡πÄ‡∏û‡∏¥‡πà‡∏° keyword scores
df_keyword = df["text"].apply(lambda t: keyword_score(t, keywords))
kw_df = pd.DataFrame(df_keyword.tolist(), columns=[f"kw_{i}" for i in range(1,8)])
df = pd.concat([df, kw_df], axis=1)

# ==========================================
# 4Ô∏è‚É£ ‡πÅ‡∏ö‡πà‡∏á train/test
# ==========================================
X_train, X_test, y_train, y_test = train_test_split(
    df.drop(columns=["package"]),
    df["package"],
    test_size=0.2, random_state=42, stratify=df["package"]
)

# ==========================================
# 5Ô∏è‚É£ Feature + Model (pure scikit-learn)
# ==========================================
feature_processor = ColumnTransformer([
    ("tfidf", TfidfVectorizer(ngram_range=(1,2), max_df=0.9, min_df=2), "text"),
    ("kw", StandardScaler(), [f"kw_{i}" for i in range(1,8)])
])

model = Pipeline([
    ("features", feature_processor),
    ("clf", LogisticRegression(max_iter=300, class_weight='balanced', solver='liblinear'))
])

# ==========================================
# 6Ô∏è‚É£ ‡πÄ‡∏ó‡∏£‡∏ô + ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
# ==========================================
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred, digits=3))

# ==========================================
# 7Ô∏è‚É£ Export ‡πÄ‡∏õ‡πá‡∏ô ONNX (100% compatible)
# ==========================================
initial_type = [
    ("text", StringTensorType([None, 1])),
    ("kw_1", FloatTensorType([None, 1])),
    ("kw_2", FloatTensorType([None, 1])),
    ("kw_3", FloatTensorType([None, 1])),
    ("kw_4", FloatTensorType([None, 1])),
    ("kw_5", FloatTensorType([None, 1])),
    ("kw_6", FloatTensorType([None, 1])),
    ("kw_7", FloatTensorType([None, 1])),
]

onnx_model = convert_sklearn(
    model,
    initial_types=initial_type,
    target_opset=17,
    options={id(model): {'zipmap': False}}  # üëà ‡∏õ‡∏¥‡∏î ZipMap
)

if isinstance(onnx_model, tuple):
    onnx_model = onnx_model[0]

with open("logreg_tfidf_keyword_model.onnx", "wb") as f:
    f.write(onnx_model.SerializeToString())

print("‚úÖ Exported ONNX model: logreg_tfidf_keyword_model.onnx")

# ==========================================
# 8Ô∏è‚É£ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• sklearn ‡∏õ‡∏Å‡∏ï‡∏¥
# ==========================================
joblib.dump(model, "logreg_tfidf_keyword_model.joblib")
print("‚úÖ Saved scikit-learn model: logreg_tfidf_keyword_model.joblib")

# ==========================================
# 9Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
# ==========================================
packages = {
    1: "Template Website",
    2: "Website Design (Visual)",
    3: "Website + UX/UI (Interaction)",
    4: "Server API + Docs (Backend Only)",
    5: "Full Website + Server (End-to-End)",
    6: "System Analysis",
    7: "AI & Data Analysis",
}

sample_texts = [
    "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI + dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢",
    "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö UX/UI ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢",
    "‡∏ó‡∏≥ backend API ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
]

for t in sample_texts:
    kw = keyword_score(t, keywords)
    input_df = pd.DataFrame([{ "text": t, **{f"kw_{i+1}": kw[i] for i in range(7)} }])
    pred = int(model.predict(input_df)[0])
    print(f"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {t}\n‚Üí ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô: {packages[pred]}\n")
